
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

/**
 * 2018研发部面试结束后，用于发送短信通知
 * @author 
 *
 */
public class YunPianSMS {

	static String APIKEY="0************************b";
	static String TPL_ID="2****8";
	static String QQqunNumber="774852738";
	static String PHONENUMBER_PATH="C:\\Users\\Administrator\\Desktop\\新建文本文档.txt";
	static String BEGIN_TIME="2018-07-02 10:30";
	static Date beginTime = null;
	static SimpleDateFormat DF;
	
	public static void main(String[] args) {
		init();
		while(true) {
			try {
				if(belongCalendar(DF.parse(DF.format(new Date())), beginTime)) {
					domain();
					break;
				}
				Thread.sleep(9000);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 初始化计时器设置
	 */
	public static void init() {
		DF = new SimpleDateFormat("yyyy-MM-dd HH:mm");//设置日期格式
	    beginTime = null;
	    try {
	        beginTime = DF.parse(BEGIN_TIME);
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
		
	}
	
	/**
     * 判断时间是否在时间段内
     * @param nowTime
     * @param beginTime
     * @return
     */
    public static boolean belongCalendar(Date nowTime, Date beginTime) {
        Calendar date = Calendar.getInstance();
        date.setTime(nowTime);
        
        System.out.println(nowTime);
        //System.out.println(date);
        
        Calendar begin = Calendar.getInstance();
        begin.setTime(beginTime);


        if (date.after(begin)) {
            return true;
        } else {
            return false;
        }
    }

	/**
	 * 主业务
	 * @return 完成信号
	 */
	static boolean domain() {
		File file = new File(PHONENUMBER_PATH);  
		BufferedReader reader = null; 
		try {
			reader = new BufferedReader(new FileReader(file));
			String tempString = null; 
			int i=0;
			while ((tempString = reader.readLine()) != null) { 
				
				sendByModel(tempString.split(",")[1] , tempString.split(",")[0] , TPL_ID , i++);
				
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			if (reader != null) {
				try {
					reader.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

		return true;
		//sendByModel("18020444515","曾天臆",TPL_ID,1);
	}
	
	/**
	 * 按照模板发送短信通知
	 * @param phone 目标手机号
	 * @param name 目标姓名
	 * @param tpl_id 模板ID
	 */
	private static void sendByModel(String phone, String name,String tpl_id,int order) {

		try {
			String tpl_value = URLEncoder.encode("#name#","UTF-8") + "="
							+ URLEncoder.encode(name,"UTF-8");
			/**/
			 Map<String, String> params = new HashMap<String, String>();//请求参数集合
			    params.put("apikey", APIKEY);
			    
			    params.put("mobile", phone); 
			    params.put("tpl_id", tpl_id);
			    params.put("tpl_value", tpl_value);
			    
			  //请自行使用post方式请求,可使用Apache HttpClient
			    System.out.println(order+" "+name+" -----推送结果："+post("https://sms.yunpian.com/v2/sms/tpl_single_send.json",  params));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		
	}

	/**
	 * 发送POST请求
	 * @param url 请求链接
	 * @param params 参数
	 */
	private static String post(String url, Map<String, String> params) {
		
		PrintWriter out = null;
        BufferedReader in = null;
        String result = "";
        String p="";
        int i=0;
        for (Entry<String, String> entry : params.entrySet()) { 
	        	if(i==0) {
	        		p += entry.getKey() + "=" + entry.getValue();
	        		i++;
	        	}else {
	        		p += "&"+entry.getKey() + "=" + entry.getValue();
	        	}
        	}
        //打印测试
        //System.out.println(p);
        try {
            URL realUrl = new URL(url);
            // 打开和URL之间的连接
            URLConnection conn = realUrl.openConnection();
            // 设置通用的请求属性
            conn.setRequestProperty("accept", "*/*");
            conn.setRequestProperty("connection", "Keep-Alive");
            conn.setRequestProperty("user-agent","Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
            // 发送POST请求必须设置如下两行
            conn.setDoOutput(true);
            conn.setDoInput(true);
            
            //1.获取URLConnection对象对应的输出流
            out = new PrintWriter(conn.getOutputStream());
            //2.中文有乱码的需要将PrintWriter改为如下
            //out=new OutputStreamWriter(conn.getOutputStream(),"UTF-8")
            // 发送请求参数
            out.print(p);
            // flush输出流的缓冲
            out.flush();
            // 定义BufferedReader输入流来读取URL的响应
            in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = in.readLine()) != null) {
                result += line;
            }
        } catch (Exception e) {
            System.out.println("发送 POST 请求出现异常！"+e);
            e.printStackTrace();
        }
        //使用finally块来关闭输出流、输入流
        finally{
            try{
                if(out!=null){
                    out.close();
                }
                if(in!=null){
                    in.close();
                }
            }
            catch(IOException ex){
                ex.printStackTrace();
            }
        }
        //System.out.println(result);
        return result;

	}

}
